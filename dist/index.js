!function(){"use strict";class t{static get HEIGHT(){return 300}static get WIDTH(){return 300}}class e{static coordinationSystemToCenter(e,s){return{x:e-t.WIDTH/2,y:s-t.HEIGHT/2}}static mapCartesianToPolar(t){const{x:e,y:s}=t;return{r:Math.sqrt(Math.pow(e,2)+Math.pow(s,2)),phi:Math.atan2(s,e)}}static mapPolarToCartesian(t){const{r:e,phi:s}=t;return{x:e*Math.cos(s),y:e*Math.sin(s)}}static normaliseAngle(t){return t%(2*Math.PI)}}class s{moveLeft(){this.x-=this.step}moveRight(){this.x+=this.step}moveUp(){this.y-=this.step}moveDown(){this.y+=this.step}render(t){const e=.9*(2*Math.PI);t.beginPath(),t.arc(this.x,this.y,this.radius,0,e),t.fill()}constructor(t,e,s){this.radius=t/2,this.step=5,this.x=e,this.y=s}}class i{handleTouchMove(t){if(!this.xDown||!this.yDown)return;const e=t.touches[0].clientX,s=t.touches[0].clientY;this.xDiff=this.xDown-e,this.yDiff=this.yDown-s,Math.abs(this.xDiff)>Math.abs(this.yDiff)?this.xDiff>0?this.onLeft():this.onRight():this.yDiff>0?this.onUp():this.onDown(),this.xDown=null,this.yDown=null}onDown(t){return this.onDown=t,this}onLeft(t){return this.onLeft=t,this}onRight(t){return this.onRight=t,this}onTouchMove(t){this.handleTouchMove(t)}onTouchStart(t){this.xDown=t.touches[0].clientX,this.yDown=t.touches[0].clientY}onUp(t){return this.onUp=t,this}run(){const t=this,e=t.onTouchMove;this.element.addEventListener("touchmove",e.bind(t),!1)}constructor(t){this.xDown=null,this.yDown=null,this.element="string"==typeof t?document.querySelector(t):t,this.element.addEventListener("touchstart",this.onTouchStart.bind(this),!1)}}class n{randomiseGate(){const t=2*Math.PI,s=0+Math.random()*t;return{end:e.normaliseAngle(s+.1*t),start:s}}render(t,e,s){t.beginPath(),t.arc(e,s,this.radius,this.endGate,this.startGate),t.stroke()}constructor(t){const{start:e,end:s}=this.randomiseGate();this.radius=t,this.startGate=e,this.endGate=s}}class h{addWall(t){this.walls.push(t)}compareAngle(){const t=this.hero,s=e.mapCartesianToPolar(e.coordinationSystemToCenter(t.x,t.y)),i=s.r+t.radius,n=this.paddingBetweenWalls;this.walls.filter(t=>!(i-t.radius>n)&&!(t.radius-i>n)).map(t=>{const i=e.normaliseAngle(t.startGate),n=e.normaliseAngle(t.endGate),h=e.normaliseAngle(2*Math.PI-s.phi);return!(i<h&&n>h)}).reduce((t,e)=>t||e);return!0}compareRadii(){const t=this.hero,s=e.mapCartesianToPolar(e.coordinationSystemToCenter(t.x,t.y)),i=s.r+t.radius,n=this.paddingBetweenWalls;return this.walls.map(t=>t.radius).filter(t=>!(i-t>n)&&!(t-i>n)).map(e=>!(s.r-t.radius>e)&&!(s.r+t.radius<e)).reduce((t,e)=>t||e)}detectCollision(){return this.compareAngle()&&this.compareRadii()}draw(){const t=this.context;this.detectCollision()&&console.warn("Code RED"),t.clearRect(0,0,this.width,this.height),this.drawWalls(),this.hero.render(t)}drawWalls(){const t=this.width/2,e=this.height/2;this.walls.forEach(s=>{s.render(this.context,t,e)})}init(){const t=new s(this.paddingBetweenWalls/2,this.width/2,this.height/2);this.setHero(t),[1,2,3,4,5,6].forEach(t=>{const e=new n(t*this.paddingBetweenWalls);this.addWall(e)}),this.registerArrowKeyHandlers(),this.registerSwipeHandlers(),window.requestAnimationFrame(this.update.bind(this))}registerArrowKeyHandlers(){const t={LEFT:37,UP:38,RIGHT:39,DOWN:40};document.body.addEventListener("keydown",e=>{switch(e.keyCode){case t.LEFT:this.hero.moveLeft(),e.preventDefault();break;case t.UP:this.hero.moveUp(),e.preventDefault();break;case t.RIGHT:this.hero.moveRight(),e.preventDefault();break;case t.DOWN:this.hero.moveDown(),e.preventDefault();break;default:console.log("Received keyCode",e.keyCode)}window.requestAnimationFrame(this.update.bind(this))},!1)}registerSwipeHandlers(){const t=new i(this.element);t.onLeft(()=>{this.hero.moveLeft(),window.requestAnimationFrame(this.update.bind(this))}),t.onUp(()=>{this.hero.moveUp(),window.requestAnimationFrame(this.update.bind(this))}),t.onRight(()=>{this.hero.moveRight(),window.requestAnimationFrame(this.update.bind(this))}),t.onDown(()=>{this.hero.moveDown(),window.requestAnimationFrame(this.update.bind(this))}),t.run()}setHero(t){this.hero=t}update(t){const e=t-this.lastUpdateTimestamp,s=e<0;(e>60||s)&&(this.draw(),window.requestAnimationFrame(this.update.bind(this)),this.lastUpdateTimestamp=t)}constructor(e){const s=document.getElementById("game"),i=t.HEIGHT,n=t.WIDTH;s.setAttribute("height",i+"px"),s.setAttribute("width",n+"px"),this.context=s.getContext("2d"),this.element=s,this.height=parseInt(i,10),this.width=parseInt(n,10),this.hero=null,this.lastUpdateTimestamp=Number(new Date),this.walls=[];const h=2*Math.PI;this.paddingBetweenWalls=2.7*h}}new h("game").init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
