!function(){"use strict";class t{dispatch(t){const{payload:e,type:s}=t;this.update(t),s in this.actions&&this.actions[s].forEach(t=>{t(e)})}get(t){return this.store[t]}register(t,e){this.store[t]=e}subscribe(t,e){t in this.actions?this.actions[t].push(e):this.actions[t]=[e]}update(t){const{key:e,payload:s}=t,n=this.store[e];this.store[e]=Object.assign(n,s)}constructor(){this.actions={},this.store={}}}class e{static registerStore(t){const e={angle:0,name:"Jane Doe",radius:0,timeElapsed:(new Date).toISOString()};return t.register("user",e),t}get store(){return this.globalStore.get("user")}set store(t){this.globalStore.dispatch(t)}get x(){const{angle:t,radius:e}=this.store,s={r:e,phi:t},n=i.mapPolarToCartesian(s);return i.coordinationSystemToVertex(n.x,n.y).p}get y(){const{angle:t,radius:e}=this.store,s={r:e,phi:t},n=i.mapPolarToCartesian(s);return i.coordinationSystemToVertex(n.x,n.y).q}moveDown(){const{radius:t}=this.store,e={key:"user",payload:{radius:t-n.USERVELOCITY},type:"UserMoveDown"};this.store=e}moveLeft(){const{angle:t}=this.store,e={key:"user",payload:{angle:t-n.USERROTATION},type:"UserMoveLeft"};this.store=e}moveRight(){const{angle:t}=this.store,e={key:"user",payload:{angle:t+n.USERROTATION},type:"UserMoveRight"};this.store=e}moveUp(){const{radius:t}=this.store,e={key:"user",payload:{radius:t+n.USERVELOCITY},type:"UserMoveUp"};this.store=e}constructor(t){const s=e.registerStore(t);this.globalStore=s}}class s{static randomiseGate(){const t=2*Math.PI,e=0+Math.random()*t;return{end:i.normaliseAngle(e+.1*t),start:e}}constructor(t){const{start:e,end:n}=s.randomiseGate();this.radius=t,this.startGate=e,this.endGate=n}}class n{static create(t){const e=document.createElement("canvas");return e.setAttribute("id",t),e.setAttribute("height",`${n.HEIGHT}px`),e.setAttribute("width",`${n.WIDTH}px`),window.document.body.appendChild(e),e}static get HEIGHT(){return 300}static get USERSIZE(){return.01*i.euclideanDistance(n.HEIGHT,n.WIDTH)}static get USERROTATION(){return 2.5}static get USERVELOCITY(){return 3}static get WALLDISTANCE(){return.03*i.euclideanDistance(n.HEIGHT,n.WIDTH)}static get WIDTH(){return 300}static updateTimer(t){window.document.getElementById("elapsed").innerText=t}render(t,e){this.context.clearRect(0,0,n.WIDTH,n.HEIGHT),e.forEach(t=>{this.renderWall(t)}),this.renderHero(t)}renderHero(t){const e=.9*(2*Math.PI),s=n.USERSIZE,i=this.context,{x:o,y:r}=t;i.beginPath(),i.arc(o,r,s,0,e),i.fill()}renderWall(t){const e=n.WIDTH/2,s=n.HEIGHT/2,i=this.context,{endGate:o,radius:r,startGate:a}=t;i.beginPath(),i.arc(e,s,r,o,a),i.stroke()}constructor(t){this.element=n.create(t),this.context=this.element.getContext("2d")}}class i{static coordinationSystemToCenter(t,e){return{x:t-n.WIDTH/2,y:e-n.HEIGHT/2}}static coordinationSystemToVertex(t,e){return{p:t+n.WIDTH/2,q:e+n.HEIGHT/2}}static euclideanDistance(t,e){return Math.sqrt(t*t+e*e)}static mapCartesianToPolar(t){const{x:e,y:s}=t;return{r:Math.sqrt(Math.pow(e,2)+Math.pow(s,2)),phi:Math.atan2(s,e)}}static mapPolarToCartesian(t){const{r:e,phi:s}=t;return{x:e*Math.cos(s),y:e*Math.sin(s)}}static normaliseAngle(t){return t%(2*Math.PI)}}class o{handleTouchMove(t){if(!this.xDown||!this.yDown)return;const e=this.handlers,s=t.touches[0].clientX,n=t.touches[0].clientY;this.xDiff=this.xDown-s,this.yDiff=this.yDown-n,Math.abs(this.xDiff)>Math.abs(this.yDiff)?this.xDiff>0?e.onLeft():e.onRight():this.yDiff>0?e.onUp():e.onDown(),this.xDown=null,this.yDown=null}onTouchMove(t){this.handleTouchMove(t)}onTouchStart(t){this.xDown=t.touches[0].clientX,this.yDown=t.touches[0].clientY}run(){const t=this,e=t.onTouchMove;this.element.addEventListener("touchmove",e.bind(t),!1)}constructor(t,e){this.xDown=null,this.yDown=null,this.element=t,this.element.addEventListener("touchstart",this.onTouchStart.bind(this),!1);const{onDown:s,onLeft:n,onRight:i,onUp:o}=e;this.handlers={onDown:s,onLeft:n,onRight:i,onUp:o}}}class r{static get KEYMAP(){return{LEFT:37,UP:38,RIGHT:39,DOWN:40}}static notifyUser(){const t=(new Date).toISOString();console.log("Hit wall",t),window.document.body.classList.add("flash"),setTimeout(()=>{window.document.body.classList.remove("flash")},500)}static compareAngle(t,e){const s=i.mapCartesianToPolar(i.coordinationSystemToCenter(t.x,t.y)),o=s.r+n.USERSIZE,r=n.WALLDISTANCE;return e.filter(t=>!(o-t.radius>r)&&!(t.radius-o>r)).map(t=>{const e=i.normaliseAngle(t.startGate),n=i.normaliseAngle(t.endGate),o=i.normaliseAngle(2*Math.PI-s.phi);return!(e<o&&n>o)}).reduce((t,e)=>t||e)}static compareRadii(t,e){const s=i.mapCartesianToPolar(i.coordinationSystemToCenter(t.x,t.y)),o=s.r+n.USERSIZE,r=n.WALLDISTANCE;return e.map(t=>t.radius).filter(t=>!(o-t>r)&&!(t-o>r)).map(t=>!(s.r-n.USERSIZE>t)&&!(s.r+n.USERSIZE<t)).reduce((t,e)=>t||e)}static detectCollision(t,e){const s=r.compareAngle(t,e),n=r.compareRadii(t,e);return s&&n}addWall(t){this.walls.push(t)}draw(){const t=this.hero,e=this.walls;r.detectCollision(t,e)&&r.notifyUser(),this.world.render(t,e)}init(){const t=this,e=this.update;[1,2,3,4,5,6].forEach(t=>{const e=new s(t*n.WALLDISTANCE);this.addWall(e)}),this.registerArrowKeyHandlers(),this.registerSwipeHandlers(),window.requestAnimationFrame(e.bind(t))}onKeyDown(t){const e=this.hero,s=t.keyCode,n=r.KEYMAP,i=this,o=this.update;switch(s){case n.LEFT:e.moveLeft(),t.preventDefault();break;case n.UP:e.moveUp(),t.preventDefault();break;case n.RIGHT:e.moveRight(),t.preventDefault();break;case n.DOWN:e.moveDown(),t.preventDefault();break;default:console.log("Received keyCode",t.keyCode)}window.requestAnimationFrame(o.bind(i))}registerArrowKeyHandlers(){const t=this,e=this.onKeyDown;window.document.body.addEventListener("keydown",e.bind(t),!1)}registerSwipeHandlers(){const t=this.hero,e=this,s=this.update,n={onDown:()=>{t.moveDown(),window.requestAnimationFrame(s.bind(e))},onLeft:()=>{t.moveLeft(),window.requestAnimationFrame(s.bind(e))},onRight:()=>{t.moveRight(),window.requestAnimationFrame(s.bind(e))},onUp:()=>{t.moveUp(),window.requestAnimationFrame(s.bind(e))}};new o(this.world.element,n).run()}update(t){const e=t-this.lastUpdateTimestamp,s=e<0,n=this,i=this.update;(e>60||s)&&(this.draw(),this.updateTimer(),window.requestAnimationFrame(i.bind(n)),this.lastUpdateTimestamp=t)}updateTimer(){const t=this.startTime,e=new Date,s=Math.round((e-t)/1e3,0);n.updateTimer(s)}constructor(s){const i=new t;this.hero=new e(i),this.world=new n(s),this.startTime=new Date,this.lastUpdateTimestamp=Number(new Date),this.state={user:{angle:0,name:"Jane Doe",radius:0,timeElapsed:(new Date).toISOString()},walls:[{gate:{start:0,end:1},radius:0}],world:{height:n.HEIGHT,width:n.WIDTH}},this.walls=[]}}new r("game").init()}();
